name: Build and Test

on:
  pull_request:
    branches: [ net35 ]
  push:
    branches: [ net35 ]
    
jobs:
  Cross_Platform_Build:  
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
        target: [netstandard2.0, netstandard2.1]
        configuration: [Debug, Release]
    env:
      LIB_PROJ: src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj
      TEST_PROJ: test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
        
    - name: Restore dependencies
      run: dotnet restore        
      
    - name: Build library (${{ matrix.configuration }})
      run: dotnet build -c ${{ matrix.configuration }} -f ${{ matrix.target }} ${{ env.LIB_PROJ }}
                  
    - name: Run tests (${{ matrix.configuration }})
      run: dotnet test -c ${{ matrix.configuration }} -f netcoreapp3.1  --no-restore --logger "trx;LogFileName=${{ matrix.os }}-${{ matrix.configuration }}-${{ matrix.target }}.trx" --results-directory ./TestResults
      
    - uses: actions/upload-artifact@v2  # upload test results
      name: Upload test results
      if: success() || failure()        # run this step even if previous step failed
      with:
          name: test-results
          path: ./TestResults/*.trx      
          
  Legacy_Build:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [windows]
        target: [net35, net461]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      if: matrix.target == 'netcoreapp3.1'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
      
    - name: Setup MSBuild Path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1.1.1

    - name: Restore test dependencies
      run: dotnet restore
      
    - name: Build VSTest (${{ matrix.configuration }})
      run: msbuild test\ICSharpCode.SharpZipLib.Tests\ICSharpCode.SharpZipLib.Tests.csproj /p:Configuration=${{ matrix.configuration }}
      
    - name: Run VStest (${{ matrix.configuration }}) 
      run: vstest.console test\ICSharpCode.SharpZipLib.Tests\bin\${{ matrix.configuration }}\${{ matrix.target }}\ICSharpCode.SharpZipLib.Tests.dll --Logger:"trx;LogFileName=${{ matrix.os }}-${{ matrix.configuration }}-${{ matrix.target }}.trx" --ResultsDirectory:./TestResults 
            
    - uses: actions/upload-artifact@v2  # upload test results
      name: Upload test results
      if: success() || failure()        # run this step even if previous step failed
      with:
          name: test-results
          path: ./TestResults/*.trx      
  Pack:
    needs: [Cross_Platform_Build, Legacy_Build]
    if: success()
    runs-on: windows-latest
    outputs:
      nbgv: ${{ steps.nbgv.outputs.SemVer2 }}    
      prerelease: ${{ steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen != '' }} 
    env:
      PKG_SUFFIX: ''
      PKG_PROJ: src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj
      PKG_PROPS: '/p:ContinuousIntegrationBuild=true /p:EmbedUntrackedSources=true'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: NBGV
      id: nbgv
      uses: dotnet/nbgv@master
      with:
        setAllVars: true

    - name: Build library for .NET Standard 2.0
      run: dotnet build -c Release -f netstandard2.0 ${{ env.PKG_PROPS }} ${{ env.PKG_PROJ }}
    - name: Build library for .NET Standard 2.1
      run: dotnet build -c Release -f netstandard2.1 ${{ env.PKG_PROPS }} ${{ env.PKG_PROJ }}
    - name: Build library for .NET Framework 3.5
      run: dotnet build -c Release -f net35  ${{ env.PKG_PROPS }} ${{ env.PKG_PROJ }}
    - name: Build library for .NET Framework 4.5
      run: dotnet build -c Release -f net45  ${{ env.PKG_PROPS }} ${{ env.PKG_PROJ }}

    - name: Create nuget package
      run: dotnet pack ${{ env.PKG_PROJ }} -c Release --output dist ${{ env.PKG_PROPS }} 

    - name: Upload nuget package artifact
      uses: actions/upload-artifact@v2
      with:
        name: Nuget package
        path: dist/*.nupkg
  Generate_Changelog:
    runs-on: ubuntu-latest
    needs: [Pack]
    outputs:
      commitLog: ${{ steps.changelog.outputs.commitLog }}
    steps:
      - name: Checkout Remote Ref
        uses: actions/checkout@master
        with:
           repository: icsharpcode/SharpZipLib
           ref: refs/heads/master
      - name: Changelog
        run: |
          git fetch --tags
          currentversion=v${{ needs.Pack.outputs.nbgv }} 
          description=$(git shortlog $(git tag --sort=-taggerdate | awk -v line='v${{ needs.Pack.outputs.nbgv }}' '$0 == line {getline; print}')..v${{ needs.Pack.outputs.nbgv }})
          description="${description//'%'/'%25'}"
          description="${description//$'\n'/'%0A'}"   # escape newline
          description="${description//$'\r'/'%0D'}"   # escape carrige return
          description="${description//$'\t'/    }"    # escape tab
          description="${description// /â€‚}"           # escape regular space with 'En Space'
          echo "::set-output name=commitLog::$description"
        id: changelog
  Release:
    runs-on: ubuntu-latest
    needs: [Generate_Changelog,Pack]
    if: success() # && needs.pack.outputs.prerelease == 'false'
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}
      SOURCE_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
    steps:
      - name: Download NuGet Packages
        uses: actions/download-artifact@v2
        id: download
        with:
          name: Nuget package

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
            tag_name: net35/v${{ needs.Pack.outputs.nbgv }}
            release_name: Backport of SharpZipLib v${{ needs.Pack.outputs.nbgv }} on .NET Framework 3.5
            prerelease: ${{ needs.Pack.outputs.prerelease }}
            body: |
               # Official release note
               ${{ needs.Generate_Changelog.outputs.commitLog }}
               
      - name: Upload Release Assets
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
           asset_path:  ${{ steps.download.outputs.download-path }}/SharpZipLib.NET35.${{ needs.Pack.outputs.nbgv }}.nupkg
           asset_name: /SharpZipLib.NET35.${{ needs.Pack.outputs.nbgv }}.nupkg
           asset_content_type: application/zip               

      - name: NuGet Push
        run: dotnet nuget push -s ${{ env.SOURCE_URL }} --api-key ${{ env.NUGET_AUTH_TOKEN }} ${{ steps.download.outputs.download-path }}/*.nupkg
        env:
           NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}
           SOURCE_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
